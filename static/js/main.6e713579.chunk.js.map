{"version":3,"sources":["fBase.js","routes/Auth.js","components/Map.js","routes/Home.js","components/PostForm.js","routes/Post.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","authService","auth","dbService","firestore","storageService","storage","Auth","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","className","type","placeholder","required","onClick","prev","icon","faExchangeAlt","Map","places","setPlaces","loading","setLoading","setType","detail","setDetail","container","useRef","map","options","center","kakao","maps","LatLng","level","makeMarker","place","content","position","geocode","overlay","CustomOverlay","yAnchor","marker","Marker","addListener","clickHandler","setMap","mouseOverHandler","mouseOutHandler","getPlaces","collection","onSnapshot","snapshot","placeArray","docs","doc","id","data","onTypeChange","useEffect","window","current","ref","defaultChecked","htmlFor","description","Home","PostForm","userObj","setName","extraAddress","setExtraAddress","setGeocode","setDescription","attachment","setAttachment","url","setUrl","address","setAddress","addressDetail","setAddressDetail","isOpenPost","setIsOpenPost","geocoder","services","Geocoder","attachmentUrl","attachmentRef","child","uid","uuidv4","putString","response","getDownloadURL","placeObj","creatorId","add","makeGeocode","result","status","Status","OK","geocodeArray","y","x","onCompletePost","fullAddr","extraAddr","addressType","bname","buildingName","zonecode","addressSearch","autoClose","onComplete","readOnly","accept","theFile","files","reader","FileReader","readAsDataURL","onloadend","finishedEvent","currentTarget","nmae","Post","history","useHistory","push","signOut","AppRouter","isLoggedIn","exact","path","App","init","setInit","setUserObj","onAuthStateChanged","user","Boolean","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e713579.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDbt76_Zwf7Pnx-cBDVxe6oDWnv32v9xqo\",\r\n  authDomain: \"jeju-guide.firebaseapp.com\",\r\n  projectId: \"jeju-guide\",\r\n  storageBucket: \"jeju-guide.appspot.com\",\r\n  messagingSenderId: \"350907878366\",\r\n  appId: \"1:350907878366:web:2f3fcda2d82f9ab4602b4f\",\r\n  measurementId: \"G-2F62EPJ668\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const firebaseInstance = firebase;\r\n\r\nexport const authService = firebase.auth();\r\nexport const dbService = firebase.firestore();\r\nexport const storageService = firebase.storage();","import { authService } from \"fBase\";\r\nimport React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faExchangeAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Auth = () => {\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [newAccount, setNewAccount] = useState(true);\r\n    const [error, setError] = useState(\"\")\r\n    const onChange = (event) => {\r\n        const {target: {name, value}} = event;\r\n        if (name === \"email\") {\r\n            setEmail(value)\r\n        } else if (name === \"password\"){\r\n            setPassword(value)\r\n        }\r\n    }\r\n    const onSubmit = async (event) => {\r\n        let data;\r\n        event.preventDefault();\r\n        try {\r\n            if (newAccount) {\r\n                data = await authService.createUserWithEmailAndPassword(\r\n                    email, \r\n                    password\r\n                );\r\n            } else {\r\n                data = await authService.signInWithEmailAndPassword(\r\n                    email, \r\n                    password\r\n                );\r\n            }\r\n        } catch (error) {\r\n            if (error.message === \"There is no user record corresponding to this identifier. The user may have been deleted.\") {\r\n                setError(\"입력하신 아이디가 없습니다.\")\r\n            } else {\r\n                setError(error.message)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const toggleAccount = () => setNewAccount((prev) => !prev)\r\n    return (\r\n        <>\r\n            <div className=\"auth-form__container\">\r\n                <form className=\"auth-form\" onSubmit={onSubmit}>\r\n                    <label className=\"auth-form__title\">미슐탱 가이드</label>\r\n                    <input className=\"input auth__input\" name=\"email\" type=\"email\" placeholder=\"Email\" required value={email} onChange={onChange}/>\r\n                    <input className=\"input auth__input\" name=\"password\" type=\"password\" placeholder=\"Password\" required value={password} onChange={onChange}/>\r\n                    <input className=\"btn\" type=\"submit\" value={newAccount ? \"Create Account\" : \"Log In\"} />\r\n                    <span className=\"error\">{error}</span>\r\n                    <span className=\"change-btn\" onClick={toggleAccount}>\r\n                        <FontAwesomeIcon icon={faExchangeAlt} className=\"change-btn__logo\" />\r\n                        {newAccount? \"Log In\" : \"Create Account\"}\r\n                    </span>\r\n                </form>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Auth;","import { dbService } from \"fBase\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\n\r\n/* global kakao */\r\n\r\nconst Map = () => {\r\n    const [places, setPlaces] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [type, setType] = useState(\"전체\");\r\n    const [detail, setDetail] = useState(null);\r\n    const container = useRef(null);\r\n    let map = {};\r\n    const options = {\r\n        center: new kakao.maps.LatLng(33.3817, 126.5602), //지도의 중심좌표.\r\n        level: 10 //지도의 레벨(확대, 축소 정도)\r\n    }\r\n\r\n    const clickHandler = (place) => {\r\n        return function () {\r\n            setDetail(place)\r\n        }\r\n    }\r\n\r\n    const mouseOverHandler = (map, overlay) => {\r\n        return function () {\r\n            overlay.setMap(map);\r\n        }\r\n    };\r\n\r\n    const mouseOutHandler = (overlay) => {\r\n        return function () {\r\n            overlay.setMap(null)\r\n        }\r\n    };\r\n\r\n    const makeMarker = (place) => {\r\n        const content = `<div class=\"place__infowindow\">${place.name}</div>`\r\n        const position = new kakao.maps.LatLng(place.geocode[0], place.geocode[1])\r\n        const overlay = new kakao.maps.CustomOverlay({\r\n            content,\r\n            position,\r\n            yAnchor: 2,\r\n        })\r\n        const marker = new kakao.maps.Marker({\r\n            map: map,\r\n            position\r\n        });\r\n\r\n        kakao.maps.event.addListener(marker, 'click', clickHandler(place));\r\n        kakao.maps.event.addListener(marker, 'mouseover', mouseOverHandler(map, overlay));\r\n        kakao.maps.event.addListener(marker, 'mouseout', mouseOutHandler(overlay));\r\n    }\r\n\r\n    const makeMap = () => {\r\n        map = new window.kakao.maps.Map(container.current, options);\r\n    }\r\n\r\n    const getPlaces = async () => {\r\n        await dbService.collection(\"places\").onSnapshot(snapshot => {\r\n            const placeArray = snapshot.docs.map(doc => ({\r\n                id:doc.id,\r\n                ...doc.data(),\r\n            }));\r\n            setPlaces(placeArray);\r\n            setLoading(true);\r\n        })\r\n    }\r\n\r\n    const onTypeChange = (event) => {\r\n        const {target : { value } } = event;\r\n        setType(value)\r\n    }\r\n\r\n    const onClickClear = () => {\r\n        setDetail(null);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getPlaces();\r\n        if (loading) {\r\n            makeMap();\r\n            places.map(place => {\r\n                if(type === \"전체\" || place.type === type) {\r\n                    makeMarker(place)\r\n                }\r\n            })\r\n        }\r\n    }, [loading, type]);\r\n    return (\r\n        <>\r\n            {loading \r\n            ? (\r\n            <div className=\"map__container\">\r\n                <div className=\"vertical\">\r\n                    <div className=\"map\" ref={container} ></div>\r\n                    <div className=\"map-radio__container\">\r\n                            <input type=\"radio\" name=\"input__place-type\" value=\"전체\" defaultChecked onChange={onTypeChange}/><label htmlFor=\"전체\">전체</label>\r\n                            <input type=\"radio\" name=\"input__place-type\" value=\"맛집\" onChange={onTypeChange}/><label htmlFor=\"전체\">맛집</label>\r\n                            <input type=\"radio\" name=\"input__place-type\" value=\"카페 & 베이커리\" onChange={onTypeChange}/><label htmlFor=\"전체\">카페 & 베이커리</label>\r\n                            <input type=\"radio\" name=\"input__place-type\" value=\"풍경\" onChange={onTypeChange}/><label htmlFor=\"전체\">풍경</label>\r\n                            <input type=\"radio\" name=\"input__place-type\" value=\"그 외 가볼만한 곳\" onChange={onTypeChange}/><label htmlFor=\"전체\">그 외 가볼만한 곳</label>\r\n                    </div>\r\n                </div>\r\n                {detail && (\r\n                    <div className=\"map__detail vertical\">\r\n                        <h3>{detail.name}</h3>\r\n                        <div>{detail.description}</div>\r\n                        <div className=\"map__detail-clear\" onClick={onClickClear}>❌</div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n            ) : \"Loading...\"}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Map;","import Map from \"components/Map\";\r\nimport React from \"react\";\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div className=\"home__container\">\r\n            <h3 className=\"home__title\">MICHETAIN GUIDE</h3>\r\n            <Map />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;","import { dbService, storageService } from \"fBase\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport DaumPostcode from \"react-daum-postcode\";\r\nimport { v4 as uuidv4} from \"uuid\";\r\n\r\n/* global kakao */\r\n\r\nconst PostForm = ({userObj}) => {\r\n    const [name, setName] = useState('');\r\n    const [extraAddress, setExtraAddress] = useState(''); \r\n    const [geocode, setGeocode] = useState([]);\r\n    const [type, setType] = useState('그외 가볼만한 곳');\r\n    const [description, setDescription] = useState('');\r\n    const [attachment, setAttachment] = useState('');\r\n    const [url, setUrl] = useState('');\r\n\r\n    const [address, setAddress] = useState(\"\");\r\n    const [addressDetail, setAddressDetail] = useState(\"\");\r\n    const [isOpenPost, setIsOpenPost] = useState(false);\r\n\r\n    const geocoder = new kakao.maps.services.Geocoder();\r\n\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        let attachmentUrl = \"\";\r\n        if (attachment !== \"\") {\r\n            const attachmentRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`)\r\n            const response = await attachmentRef.putString(attachment, \"data_url\")\r\n            attachmentUrl = await response.ref.getDownloadURL();\r\n        }\r\n\r\n        const placeObj = {\r\n            name,\r\n            addressDetail,\r\n            address,\r\n            extraAddress,\r\n            geocode,\r\n            type,\r\n            description,\r\n            attachmentUrl,\r\n            url,\r\n            creatorId: userObj.uid\r\n        }\r\n        await dbService.collection(\"places\").add(placeObj)\r\n        setName('');\r\n        setAddress('');\r\n        setAddressDetail('');\r\n        setExtraAddress('');\r\n        setGeocode([]);\r\n        setType('');\r\n        setDescription('');\r\n        setAttachment('');\r\n        setUrl('');\r\n    }\r\n\r\n    const onNameChange = (event) => {\r\n        const { target: {value} } = event;\r\n        setName(value);\r\n    }\r\n\r\n    const onExtraAddressChange = (event) => {\r\n        const { target: {value} } = event;\r\n        setExtraAddress(value);\r\n    }\r\n    \r\n    const onTypeChange = (event) => {\r\n        const { target: {value} } = event;\r\n        setType(value);\r\n    }\r\n\r\n    const onDescriptionChange = (event) => {\r\n        const { target: {value} } = event;\r\n        setDescription(value);\r\n    }\r\n\r\n    const onAttachmentChange = (event) => {\r\n        const {target: { files }} = event;\r\n        const theFile = files[0];\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(theFile);\r\n        reader.onloadend = (finishedEvent) => {\r\n            const {currentTarget: {result}} = finishedEvent\r\n            setAttachment(result)\r\n        }\r\n    }\r\n\r\n    const onUrlChange = (event) => {\r\n        const { target: {value} } = event;\r\n        setUrl(value);\r\n    }\r\n\r\n    const onChangeOpenPost = (event) => {\r\n        event.preventDefault();\r\n        setIsOpenPost(!isOpenPost);\r\n    };\r\n    \r\n    const makeGeocode = (result, status) => {\r\n        if (status === kakao.maps.services.Status.OK) {\r\n            const geocodeArray = [result[0].y, result[0].x]\r\n            setGeocode(geocodeArray)\r\n        }\r\n    }\r\n\r\n    const onCompletePost = async (data) => {\r\n        let fullAddr = data.address;\r\n        let extraAddr = '';\r\n    \r\n        if (data.addressType === 'R') {\r\n            if (data.bname !== '') {\r\n                extraAddr += data.bname;\r\n            }\r\n            if (data.buildingName !== '') {\r\n                extraAddr += (extraAddr !== '' ? `, ${data.buildingName}` : data.buildingName);\r\n            }\r\n            fullAddr += (extraAddr !== '' ? ` (${extraAddr})` : '');\r\n        }\r\n    \r\n        setAddress(data.zonecode);\r\n        setAddressDetail(fullAddr);\r\n    \r\n        await geocoder.addressSearch(addressDetail, makeGeocode)\r\n\r\n        setIsOpenPost(false);\r\n    }\r\n\r\n    return (\r\n        <form className=\"post-form__container\" onSubmit={onSubmit}>\r\n            <div className=\"post-form__content\">               \r\n                <label htmlFor=\"place-name\">장소 이름 : </label>\r\n                <input type=\"text\" name=\"place-name\" onChange={onNameChange} value={name} required/>\r\n            </div>\r\n            <div className=\"post-form__content vertical\">  \r\n                <div className=\"address-input\">\r\n                    { isOpenPost && <DaumPostcode autoClose onComplete={onCompletePost} /> }\r\n                    <button onClick={onChangeOpenPost}>주소 입력(지번)</button>\r\n                </div>\r\n                <div className=\"address-content__container\">\r\n                    <label htmlFor=\"place-address\">주소 : </label>\r\n                    <input className=\"place-address\" type=\"text\" name=\"place-address\" value={addressDetail} readOnly required/>\r\n                    <input className=\"place-address-number\" type=\"text\" name=\"place-address-number\" value={address} readOnly required/>\r\n                </div>         \r\n                <div className=\"address-content__container\">\r\n                    <label htmlFor=\"place-address\">나머지 주소 : </label>\r\n                    <input type=\"text\" name=\"place-extra-address\" onChange={onExtraAddressChange} value={extraAddress}/>  \r\n                </div>  \r\n                <input className=\"place-geocode\" type=\"text\" name=\"place-geocode\" readOnly value={geocode} required />\r\n            </div>     \r\n            <div className=\"post-form__content vertical\">         \r\n                <label htmlFor=\"place-type\">장소 종류</label>\r\n                <select name=\"place-type\" required onChange={onTypeChange} >\r\n                    <option value=\"맛집\">맛집</option>\r\n                    <option value=\"카페 & 베이커리\">카페 & 베이커리</option>\r\n                    <option value=\"풍경\">풍경</option>\r\n                    <option value=\"그 외 가볼만한 곳\">그 외 가볼만한 곳</option>\r\n                </select>\r\n            </div>\r\n            <div className=\"post-form__content vertical\">               \r\n                <label htmlFor=\"place-description\">장소 설명</label>\r\n                <textarea className=\"place-description\" name=\"place-description\" placeholder=\"설명\" onChange={onDescriptionChange} value={description} required/>\r\n            </div>\r\n            <div className=\"post-form__content vertical\">               \r\n                <label htmlFor=\"place-img\">장소 사진(필수 X)</label>\r\n                <input type=\"file\" accept=\"image/*\" name=\"place-img\" onChange={onAttachmentChange} />\r\n            </div>\r\n            <div className=\"post-form__content vertical\">               \r\n                <label htmlFor=\"place-description\">참고 사이트 주소(있다면)</label>\r\n                <input type=\"url\" nmae=\"place-url\" placeholder=\"사이트 주소\" onChange={onUrlChange}  value={url}/>\r\n            </div>\r\n            <input type=\"submit\" value=\"등록하기\" />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default PostForm;","import PostForm from \"components/PostForm\";\r\nimport { authService } from \"fBase\";\r\nimport React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Post = ({userObj}) => {\r\n    const history = useHistory();\r\n    const onLogOutClick = () => {\r\n        authService.signOut();\r\n        history.push(\"/\")\r\n    }\r\n    const onHomeClick = () => {\r\n        history.push(\"/\")\r\n    }\r\n    return (\r\n        <div className=\"post__container\">\r\n            <PostForm userObj={userObj}/>\r\n            <button onClick={onHomeClick}>Home</button>\r\n            <button onClick={onLogOutClick}>Logout</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from \"react\";\r\nimport { HashRouter as Router, Route, Switch, useHistory} from \"react-router-dom\";\r\nimport Auth from \"routes/Auth\";\r\nimport Home from \"routes/Home\";\r\nimport Post from \"routes/Post\";\r\n\r\nconst AppRouter = ({ isLoggedIn, userObj }) => {\r\n    return (\r\n        <>\r\n            <Router>\r\n                <Switch>\r\n                    {isLoggedIn \r\n                        ? (                        \r\n                            <Route exact path=\"/auth\">\r\n                                <Post userObj={userObj}/>\r\n                            </Route>\r\n                        ) : (    \r\n                            <Route exact path=\"/auth\">\r\n                                <Auth />\r\n                            </Route>\r\n                            )\r\n                    }\r\n                    <Route exact path=\"/\">\r\n                        <Home />\r\n                    </Route>\r\n                </Switch>\r\n            </Router>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AppRouter;","import React, {useEffect, useState} from \"react\";\nimport AppRouter from \"components/Router\"\nimport {authService} from \"fBase\"\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if(user) {\n        setUserObj({\n          uid:user.uid, \n        });\n      } else {\n        setUserObj(null);\n      }\n      setInit(true)\n    })\n  }, [])\n  return (\n    <>\n      {init ? <AppRouter isLoggedIn={Boolean(userObj)} userObj={ userObj } /> : \"Loading...\"}\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'styles.css';\nimport App from 'components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}